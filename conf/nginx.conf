#user  root;

worker_processes  1;

error_log  logs/error.log   error;
error_log  logs/info.log    info;
#error_log  logs/error.log  notice;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/json;
    server_tokens off;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    # 设置默认 lua 搜索路径，添加 lua 路径
    # 此处写相对路径时，对启动 nginx 的路径有要求，必须在 nginx 目录下启动，require 找不到
    # comm.param 绝对路径当然也没问题，但是不可移植，因此应使用变量 $prefix 或
    # ${prefix}，OR 会替换为 nginx 的 prefix path。
    # ;; 为默认优先路径

    # lua_package_path 'lua/?.lua;/blah/?.lua;;';
    lua_package_path '$prefix/lua/?.lua;;$prefix/lua/comm/?.lua;$prefix/lua/api/?.lua;';

    # 共享内存
    lua_shared_dict dogs 10m;

    # 这里设置为 off，是为了避免每次修改之后都要重新 reload 的麻烦。
    # 在生产环境上务必确保 lua_code_cache 设置成 on。
    lua_code_cache off;

    init_by_lua_block {
        require 'resty.core'
    }

    server {
        listen 8080;

        # 在代码路径中使用nginx变量
        # 注意： nginx var 的变量一定要谨慎，否则将会带来非常大的风险
        location ~ ^/api/([-_a-zA-Z0-9/]+) {
            set $my_var 'wahaha';

            # 准入阶段完成参数验证
            access_by_lua_file  lua/access_check.lua;

            #内容生成阶段
            #add_header 'Content-Type' 'application/json';
            content_by_lua_file lua/api/$1.lua;
            log_by_lua_file lua/log/info.lua;
        }

        location ~ ^/test/([-_a-zA-Z0-9/]+) {
            access_by_lua_file  lua/access_check.lua;
            content_by_lua_file lua/$1.lua;
        }

        location /proxy {
            #rewrite ^/proxy/(.*) /api2/$1 break;
            #proxy_pass http://47.92.220.76;
            content_by_lua_file lua/api/api_ngx_req_proxy.lua;
        }

        location /api_stage_test {
            log_by_lua_block {
                ngx.sleep(1)
            }
        }

        location /across_stage_test {
            rewrite_by_lua_block {
                print(ngx.ctx.foo1)
                ngx.ctx.foo = 76
            }
            access_by_lua_block {
                ngx.ctx.foo1 = ngx.ctx.foo + 3
            }
            content_by_lua_block {
                ngx.say(ngx.ctx.foo1 + ngx.ctx.foo)
            }
            log_by_lua_block {
                print("ngx.ctx.foo1: " .. ngx.ctx.foo1)
            }
        }

        location /across_stage_test2 {
            content_by_lua_file lua/across_stage_test2.lua;
        }

    }

}