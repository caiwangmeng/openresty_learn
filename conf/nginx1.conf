#user  root;

worker_processes  1;

error_log  logs/error.log   error;
error_log  logs/info.log    info;
#error_log  logs/error.log  notice;

events {
    worker_connections 1024;
}

http {

    lua_package_path '$prefix/lua/?.lua;;$prefix/lua/comm/?.lua;$prefix/lua/api/?.lua;';

    # 共享内存
    lua_shared_dict dogs 10m;

    # 这里设置为 off，是为了避免每次修改之后都要重新 reload 的麻烦。
    # 在生产环境上务必确保 lua_code_cache 设置成 on。
    lua_code_cache off;

    init_by_lua_block {
        require 'resty.core'
    }

    server {
        listen 8080;

        location = /test {
            content_by_lua_block {
                local dogs = ngx.shared.dogs

                local len, err = dogs:lpush("foo", "bar")
                if len then
                    ngx.say("push success")
                else
                    ngx.say("push err: ", err)
                end

                local val, err = dogs:llen("foo")
                ngx.say(val, " ", err)

                local val, err = dogs:lpop("foo")
                ngx.say(val, " ", err)

                local val, err = dogs:llen("foo")
                ngx.say(val, " ", err)

                local val, err = dogs:lpop("foo")
                ngx.say(val, " ", err)
            }
        }

    }

}